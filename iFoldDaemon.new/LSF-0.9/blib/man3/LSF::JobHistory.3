.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LSF::JobHistory 3"
.TH LSF::JobHistory 3 "2002-04-11" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
LSF::JobHistory \- get historical information about LSF jobs.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use LSF::JobHistory;
.PP
use LSF::JobHistory RaiseError => 0, PrintError => 1, PrintOutput => 0;
.PP
( \f(CW$jobhistory\fR ) = LSF::JobHistory\->new( [\s-1ARGS\s0] );
.PP
( \f(CW$jobhistory\fR ) = LSF::JobHistory\->new( \f(CW$job\fR );
.PP
( \f(CW$jobhistory\fR ) = LSF::JobHistory\->new( [\s-1JOBID\s0] );
.PP
@jobhistory = LSF::JobHistory\->new( \-J => '/MyJobGroup/*');
.PP
( \f(CW$jobhistory\fR ) = LSF::JobHistory\->new($job);
.PP
$jobhistory = \f(CW$job\fR\->history;
.PP
\&... etc ...
.PP
$exit_status = \f(CW$jobhistory\fR\->exit_status;
.PP
$pid = \f(CW$jobhistory\fR\->pid;
.PP
$command = \f(CW$jobhistory\fR\->command;
.PP
$cwd = \f(CW$jobhistory\fR\->cwd;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`LSF::JobHistory\*(C'\fR is a wrapper arround the \s-1LSF\s0 'bhist' command used to obtain 
historical information about jobs. See the 'bhist' man page for more
information. This provides a more reliable way to obtain the exit status of
an \s-1LSF\s0 job than from the LSF::JobInfo object because the bhist command can
search all of the available \s-1LSF\s0 logs to find the information.
.SH "INHERITS FROM"
.IX Header "INHERITS FROM"
\&\fB\s-1LSF\s0\fR
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.ie n .IP "new( [\s-1ARGS\s0] || [\s-1JOBID\s0] || $job );" 4
.el .IP "new( [\s-1ARGS\s0] || [\s-1JOBID\s0] || \f(CW$job\fR );" 4
.IX Item "new( [ARGS] || [JOBID] || $job );"
($jobhistory) = LSF::JobHistory\->new(  [\s-1ARGS\s0]
                                    || [\s-1JOBID\s0]
                                    );
.Sp
Creates a new \f(CW\*(C`LSF::JobHistory\*(C'\fR object.
.Sp
Arguments are the \s-1LSF\s0 parameters normally passed to 'bhist' or
a valid \s-1LSF\s0 jobid or LSF::Job object. The bhist command is automatically called 
with the \-n 0 and \-l flags. 
.Sp
Returns an array of LSF::JobHistory objects. Of course if your argument to new is
a single jobid then you will get an array with one item. If you query for a 
number of jobs with the same name or path then you will get a list.
In scalar context returns the number of jobs that match that criteria.
.SH "BUGS"
.IX Header "BUGS"
Please report them.
Otherwise... the parsing of the \s-1LSF\s0 output can fail if the job names have 
non-alphanumeric characters in them. You probably shouldn't do this anyway.
.SH "HISTORY"
.IX Header "HISTORY"
The \fBLSF::Batch\fR module on cpan didn't compile easily on all platforms i wanted.
The \s-1LSF\s0 \s-1API\s0 didn't seem very perlish either. As a quick fix I knocked these
modules together which wrap the \s-1LSF\s0 command line interface. It was enough for
my simple usage. Hopefully they work in a much more perly manner.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1LSF\s0,
LSF::Job,
bjobs
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Southern (mark_southern@merck.com)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002, Merck & Co. Inc. All Rights Reserved.
This module is free software. It may be used, redistributed
and/or modified under the terms of the Perl Artistic License
(see http://www.perl.com/perl/misc/Artistic.html)
