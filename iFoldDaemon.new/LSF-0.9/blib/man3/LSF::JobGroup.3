.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LSF::JobGroup 3"
.TH LSF::JobGroup 3 "2002-04-11" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
LSF::JobGroup \- manipulate LSF job groups
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use LSF::JobGroup;
.PP
use LSF::JobGroup RaiseError => 0, PrintError => 1, PrintOutput => 0;
.PP
$jobgroup = LSF::JobGroup\->new( [\s-1GROUP_NAME\s0] );
.PP
\&...
.PP
$jobgroup\->add( [\s-1ARGS\s0] ) unless \f(CW$jobgroup\fR\->exists;
.PP
$jobgroup\->delete;
.PP
$jobgroup\->hold;
.PP
$jobgroup\->release;
\&...
\&\f(CW$jobgroup\fR\->modify(\-w => 'exited(/mygroup/,==0)' );
\&...
\&\f(CW@jobs\fR = \f(CW$jobgroup\fR\->jobs('\-r');
\&... etc ...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`LSF::JobGroup\*(C'\fR is a wrapper arround the \s-1LSF\s0 b* commands used to manipulate job
groups. for a description of how the \s-1LSF\s0 commands work see the man pages of:
.PP
.Vb 1
\&    bgadd bgdel bghold bgrel bgmod bjobs
.Ve
.SH "INHERITS FROM"
.IX Header "INHERITS FROM"
\&\fB\s-1LSF\s0\fR
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1NUM\s0] )" 4
.IX Item "new ( [NUM] )"
$jobgroup = LSF::JobGroup\->new('/MyGroup');
.Sp
Creates a new \f(CW\*(C`LSF::JobGroup\*(C'\fR object.
.Sp
Required argument is a job group name. This can be a single group name or a
path, much like a filesystem path. This does not *have* to exist in the system
as new job groups can be created. Names should only contain alphanumeric 
characters plus '_' and '\-'. Not only my code but also \s-1LSF\s0 job dependancy
expressions will fail if you attempt otherwise.
.SH "METHODS"
.IX Header "METHODS"
.IP "$jobgroup\->exists" 4
.IX Item "$jobgroup->exists"
\&\f(CW\*(C`id\*(C'\fR returns 1 if the job group exists, 0 otherwise. The method attempts to
create the group and if it fails it examines the \s-1LSF\s0 output to see if the group
existed. I couldn't find a better test to use. Answers on a postcard...
.IP "$jobgroup\->add" 4
.IX Item "$jobgroup->add"
Adds a job group, or group path.
Returns true on success, false on failure. Sets $? and $@;
.IP "$jobgroup\->delete" 4
.IX Item "$jobgroup->delete"
Deletes a job group.
Returns true on success, false on failure. Sets $? and $@;
.IP "$jobgroup\->hold" 4
.IX Item "$jobgroup->hold"
Holds a \s-1LSF\s0 job group. All pending jobs will wait until the group is released.
Returns true on success, false on failure. Sets $? and $@;
.IP "$jobgroup\->release" 4
.IX Item "$jobgroup->release"
Releases a \s-1LSF\s0 job group. Pending jobs are free to run.
Returns true on success, false on failure. Sets $? and $@;
.IP "$job\->modify([\s-1ARGS\s0])" 4
.IX Item "$job->modify([ARGS])"
Modifies the \s-1LSF\s0 job group. For example, changing its name or its dependancy
expression. See the bgmod man page.
.Sp
$jobgroup\->modify(\-w => \*(L"started($jobgroup,==0)\*(R" );
\&\f(CW$jobgroup\fR\->modify(\-w => \*(L"ended($jobgroup,==0)\*(R" );
.IP "$jobgroup\->jobs([[\s-1ARGS\s0]])" 4
.IX Item "$jobgroup->jobs([[ARGS]])"
Returns an list of LSF::Job objects of jobs contained within this job group.
Remember to use the '\-r' flag if you want to include jobs in sub groups.
.SH "BUGS"
.IX Header "BUGS"
The use of the '\-l' flag of the \s-1LSF\s0 command lines can be considered a bug.
Using group names with non alphabetic characters can also be considered a bug.
Otherwise please report them.
.SH "HISTORY"
.IX Header "HISTORY"
The \fBLSF::Batch\fR module on cpan didn't compile easily on all platforms i wanted.
The \s-1LSF\s0 \s-1API\s0 didn't seem very perlish either. As a quick fix I knocked these
modules together which wrap the \s-1LSF\s0 command line interface. It was enough for
my simple usage. Hopefully they work in a much more perly manner.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1LSF\s0,
LSF::Job,
bgadd,
bgdel,
bghold,
bgrel,
bgmod,
bjobs
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Southern (mark_southern@merck.com)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002, Merck & Co. Inc. All Rights Reserved.
This module is free software. It may be used, redistributed
and/or modified under the terms of the Perl Artistic License
(see http://www.perl.com/perl/misc/Artistic.html)
