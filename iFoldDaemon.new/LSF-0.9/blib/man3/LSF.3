.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LSF 3"
.TH LSF 3 "2002-04-11" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
LSF \- A perl API built on top of the LSF command line tools
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use LSF;
\&    use LSF RaiseError => 1, PrintError => 1, PrintOutput => 1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1NOTE:\s0 \s-1FOR\s0 \s-1THESE\s0 \s-1MODULES\s0 \s-1TO\s0 \s-1WORK\s0 \s-1IT\s0 \s-1IS\s0 \s-1ESSENTIAL\s0 \s-1THAT\s0 \s-1YOU\s0 \s-1INCLUDE\s0 \s-1THE\s0 \s-1LSF\s0 
\&\s-1COMMAND\s0 \s-1LINES\s0 \s-1IN\s0 \s-1YOUR\s0 \s-1PATH\s0.
.PP
This is the base class of the \s-1LSF\s0 suite of modules. 'use \s-1LSF\s0' will also 
preload all of the \s-1LSF\s0 modules at one time. Currently this includes:
.PP
.Vb 5
\&      LSF::Job
\&      LSF::JobHistory
\&      LSF::JobGroup
\&      LSF::Queue
\&      LSF::JobManager
.Ve
.PP
Two error reporting strategies are available and can be set globally via the
\&'use \s-1LSF\s0' statement or individually in each of the \s-1LSF\s0 modules. By setting the
\&'RaiseError' directive to true, or by using the RaiseError class method, the 
\&\s-1LSF\s0 modules will die on error, otherwise they will return false, setting $? to 
the exit value and $@ to the stderr of the \s-1LSF\s0 command line. Additionally
the printing of \s-1LSF\s0 command line stdout and stderr can be controlled via the 
\&'PrintOutput' and 'PrintError' directives or class methods of the same names.
Defaults are as above.
.PP
For more information on any of these modules, please see its respective
documentation.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.IP "\s-1\fILSF\s0()\fR" 4
.IX Item "LSF()"
Returns the \s-1LSF\s0 version string
.IP "RaiseError( [ [ \s-1TRUE\s0 or \s-1FALSE\s0 ] ] )" 4
.IX Item "RaiseError( [ [ TRUE or FALSE ] ] )"
Controls whether \s-1LSF\s0 command line errors will be thrown. The default is
\&\s-1FALSE\s0. When called with no arguments returns the current value.
.IP "PrintError( [ [ \s-1TRUE\s0 or \s-1FALSE\s0 ] ] )" 4
.IX Item "PrintError( [ [ TRUE or FALSE ] ] )"
Controls printing to \s-1STDERR\s0 the stderr of the \s-1LSF\s0 command line. The default is
\&\s-1TRUE\s0. When called with no arguments returns the current value.
.IP "PrintOutput( [ [ \s-1TRUE\s0 or \s-1FALSE\s0 ] ] )" 4
.IX Item "PrintOutput( [ [ TRUE or FALSE ] ] )"
Controls printing to \s-1STDOUT\s0 the stdout of the \s-1LSF\s0 command line. The default is
\&\s-1FALSE\s0. When called with no arguments returns the current value.
.SH "HISTORY"
.IX Header "HISTORY"
The \fBLSF::Batch\fR module on cpan didn't compile easily on all platforms i wanted.
The \s-1LSF\s0 \s-1API\s0 didn't seem very perlish either. As a quick fix I knocked these
modules together which wrap the \s-1LSF\s0 command line interface. It was enough for
my simple usage. Hopefully they work in a much more perly manner.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
LSF::Batch,
LSF::Job,
LSF::JobHistory,
LSF::JobManager,
LSF::JobGroup,
LSF::Queue,
bsub,
bhist,
bjobs,
bswitch,
bdel,
bkill,
bstop,
bmod,
btop,
bbot,
brun,
bqueues,
bgadd,
bgdel,
bgmod,
bghold,
bgrel
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Southern (mark_southern@merck.com)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002, Merck & Co. Inc. All Rights Reserved.
This module is free software. It may be used, redistributed
and/or modified under the terms of the Perl Artistic License
(see http://www.perl.com/perl/misc/Artistic.html)
